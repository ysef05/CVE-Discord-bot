import discord
import aiosqlite
import asyncio
import nvdlib
import yaml
import sys
from discord import app_commands, Interaction
from discord.ext import commands
from typing import Optional

with open('config.yml', 'r') as file:
    data = yaml.safe_load(file)

guild_id = data["General"]["GUILD_ID"]
activity = data["General"]["ACTIVITY"].lower()
doing_activity = data["General"]["DOING_ACTIVITY"]
status = data["General"]["STATUS"].lower()
token = data["General"]["TOKEN"]
embed_color = data["General"]["EMBED_COLOR"]

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

if status == "online":
    _status = getattr(discord.Status, status)
elif status == "idle":
    _status = getattr(discord.Status, status)
elif status == "dnd":
    _status = getattr(discord.Status, status)
elif status == "invisible":
    _status = getattr(discord.Status, status)
else:
    sys.exit(f"""
{bcolors.FAIL}{bcolors.BOLD}ERROR:{bcolors.ENDC}
{bcolors.FAIL}Invalid Status: {bcolors.ENDC}{bcolors.OKCYAN}{status}{bcolors.ENDC}
{bcolors.OKBLUE}Valid Options: {bcolors.ENDC}{bcolors.OKGREEN}{bcolors.UNDERLINE}online{bcolors.ENDC}{bcolors.OKGREEN}, {bcolors.UNDERLINE}idle{bcolors.ENDC}{bcolors.OKGREEN}, {bcolors.UNDERLINE}dnd{bcolors.ENDC}{bcolors.OKGREEN}, or {bcolors.UNDERLINE}invisible{bcolors.ENDC}
{bcolors.OKGREEN}config.json {bcolors.OKCYAN}Line 7
""")

if activity == "playing":
    if doing_activity == "":
        sys.exit(f"""
{bcolors.FAIL}{bcolors.BOLD}ERROR:{bcolors.ENDC}
{bcolors.FAIL}Invalid Doing Activity: {bcolors.OKBLUE}It Must Be Set!
{bcolors.OKGREEN}config.json {bcolors.OKCYAN}Line 5
""")
    else:
        _activity = discord.Game(name=doing_activity)
elif activity == "watching":
    if doing_activity == "":
        sys.exit(f"""
{bcolors.FAIL}{bcolors.BOLD}ERROR:{bcolors.ENDC}
{bcolors.FAIL}Invalid Doing Activity: {bcolors.OKBLUE}It Must Be Set!
{bcolors.OKGREEN}config.json {bcolors.OKCYAN}Line 5
""")
    else:
        _activity = discord.Activity(name=doing_activity, type=discord.ActivityType.watching)
elif activity == "listening":
    if doing_activity == "":
        sys.exit(f"""
{bcolors.FAIL}{bcolors.BOLD}ERROR:{bcolors.ENDC}
{bcolors.FAIL}Invalid Doing Activity: {bcolors.OKBLUE}It Must Be Set!
{bcolors.OKGREEN}config.json {bcolors.OKCYAN}Line 5
""")
    else:
        _activity = discord.Activity(name=doing_activity, type=discord.ActivityType.listening)
else:
    sys.exit(f"""
{bcolors.FAIL}{bcolors.BOLD}ERROR:{bcolors.ENDC}
{bcolors.FAIL}Invalid Activity: {bcolors.ENDC}{bcolors.OKCYAN}{activity}{bcolors.ENDC}
{bcolors.OKBLUE}Valid Options: {bcolors.ENDC}{bcolors.OKGREEN}{bcolors.UNDERLINE}playing{bcolors.ENDC}{bcolors.OKGREEN}, {bcolors.UNDERLINE}watching{bcolors.ENDC}{bcolors.OKGREEN}, or {bcolors.UNDERLINE}listening{bcolors.ENDC}{bcolors.OKGREEN}
{bcolors.OKGREEN}config.json {bcolors.OKCYAN}Line 4
""")

intents = discord.Intents.all()
intents.message_content = True

def owner_only():
    async def actual_check(interaction: Interaction):
        return await interaction.client.is_owner(interaction.user)
    return app_commands.check(actual_check)

class StuffView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='Test', style=discord.ButtonStyle.green, custom_id='test:1')
    async def test(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message('Testing the bot!')

class StuffViewBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=commands.when_mentioned_or('.'), owner_ids=[503641822141349888, 653615148111495188], intents=intents, activity=_activity, status=_status)
        self.persistent_views_added = False

    async def on_ready(self):
        if not self.persistent_views_added:
            self.add_view(StuffView())
            self.persistent_views_added = True

        print(f'Signed in as {self.user}')

        await self.tree.sync(guild=discord.Object(id=guild_id))
        await self.tree.sync()

    async def setup_hook(self):
        await self.add_cog(CreateCVECog(self), guilds=[discord.Object(id=guild_id)])
        await self.add_cog(DeleteCVECog(self), guilds=[discord.Object(id=guild_id)])
        await self.add_cog(EditCVECog(self), guilds=[discord.Object(id=guild_id)])

client = StuffViewBot()
client.remove_command('help')

@client.command()
@commands.is_owner()
async def sqlite(ctx):
    db = await aiosqlite.connect('database.db')
    cursor = await db.execute("""
    CREATE TABLE cve (
        code STRING,
        file STRING,
        name STRING,
        severity INTEGER,
        score INTEGER,
        description STRING,
        summary STRING,
        reference STRING,
        weaknesses STRING,
        conclusion STRING
    )""")
    await cursor.close()
    await db.commit()
    await db.close()
    a = await ctx.reply('Done!')
    await asyncio.sleep(5)
    await a.delete()
    await ctx.message.delete()

@client.command()
@commands.is_owner()
async def delete(ctx):
    db = await aiosqlite.connect('database.db')
    await db.execute('DROP TABLE cve;')
    await db.commit()
    await db.close()
    a = await ctx.reply('Done!')
    await asyncio.sleep(5)
    await ctx.message.delete()
    await a.delete()

@client.tree.command(guild=discord.Object(id=guild_id), description="Search a CVE ID for a vulnerability!")
@app_commands.describe(cve="What is the CVE ID you're searching for?")
async def cve(interaction: discord.Interaction, cve: str):
    print(f'{bcolors.OKGREEN}{bcolors.BOLD}✔{bcolors.ENDC}{bcolors.OKCYAN} The CVE command has started to run{bcolors.ENDC}')
    await interaction.response.defer(thinking=True, ephemeral=True)
    db = await aiosqlite.connect('database.db')
    cursor = await db.execute('SELECT * from cve WHERE code=?', (cve, ))
    a = await cursor.fetchone()
    if a is not None:
        embed = discord.Embed(
            title=f"CVE Search ({cve})",
        color=discord.Color.from_str(embed_color))
        embed.add_field(name="Malware/Target Name", value=f"{a[2]}", inline=True)
        embed.add_field(name="Severity", value=f"{a[3]}", inline=True)
        embed.add_field(name="Score", value=f"{a[4]}", inline=True)
        embed.add_field(name="Description", value=f"{a[5]}", inline=True)
        summary = discord.Embed(
            title=f"Summary",
            description=f"{a[6]}",
        color=discord.Color.from_str(embed_color))
        sandbox = discord.Embed(
            title=f"Cuckoo Sandbox Analysis File",
            description=f"{a[1]}",
        color=discord.Color.from_str(embed_color))
        references = discord.Embed(
            title=f"References",
            description=f"{a[7]}",
        color=discord.Color.from_str(embed_color))
        weaknesses = discord.Embed(
            title=f"Weaknesses",
            description=f"{a[8]}",
        color=discord.Color.from_str(embed_color))
        conclusion = discord.Embed(
            title=f"Conclusion",
            description=f"{a[9]}",
        color=discord.Color.from_str(embed_color))
        await interaction.followup.send(embeds=[embed, summary, sandbox, references, weaknesses, conclusion])
    else:
        #try:
            r = nvdlib.searchCVE(cveId=f'{cve}')[0]
            new_cve = cve.replace('CVE-', '')
            embed = discord.Embed(
                title=f"CVE Search ({new_cve})",
            color=discord.Color.from_str(embed_color))
            try:
                embed.add_field(name="Severity", value=f"{r.v31severity}", inline=True)
            except:
                pass
            try:
                embed.add_field(name="Score", value=f"{r.v31score}", inline=True)
            except:
                pass
            try:
                embed.add_field(name="Description", value=f"{r.descriptions[0].value}", inline=True)
            except:
                pass
            try:
                embed.add_field(name="Vector", value=f"{r.v31vector}", inline=True)
            except:
                pass
            reference_num = 1
            references = discord.Embed(
                title=f"References",
            color=discord.Color.from_str(embed_color))
            weaknesses = discord.Embed(
                title=f"Weaknesses",
            color=discord.Color.from_str(embed_color))
            for x in r.references:
                references.add_field(name=f"Reference #{reference_num}", value=f"{x.url}", inline=True)
                reference_num += 1
            for y in r.weaknesses:
                weaknesses.add_field(name="CWE-ID", value=f"{y.description[0].value}", inline=True)
                weaknesses.add_field(name="Source", value=f"{y.source}", inline=True)
            more = discord.Embed(
                title=f"More Info",
                description=f"{r.url}",
            color=discord.Color.from_str(embed_color))
            await interaction.followup.send(embeds=[embed, references, weaknesses, more])
        #except:
        #    await interaction.followup.send('Invalid CVE code!')
    print(f'{bcolors.OKGREEN}{bcolors.BOLD}{bcolors.ENDC}✔{bcolors.OKCYAN} The CVE command has finished running{bcolors.ENDC}')

class CreateCVECog(commands.GroupCog, name="create"):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        super().__init__() 

    @app_commands.command(name="cve", description="Create a CVE!")
    @app_commands.guilds(discord.Object(id=guild_id))
    @app_commands.describe(code="What is the code of the CVE?")
    @app_commands.describe(name="What is the name of the CVE?")
    @app_commands.describe(severity="What is the severity of the CVE?")
    @app_commands.describe(score="What is the score of the CVE?")
    @app_commands.describe(description="What is the description of the CVE?")
    @app_commands.describe(summary="What is the summar of the CVE?")
    @app_commands.describe(references="What are the references of the CVE?")
    @app_commands.describe(conclusion="What is the conclusion of the CVE?")
    @owner_only()
    async def cve(self, interaction: discord.Interaction, code: str, file: Optional[str], name: str, severity: int, score: int, description: str, summary: str, references: str, weaknesses: str, conclusion: str) -> None:
        print(f'{bcolors.OKGREEN}{bcolors.BOLD}✔{bcolors.ENDC}{bcolors.OKCYAN} The Create command has started to run{bcolors.ENDC}')
        db = await aiosqlite.connect('database.db')
        cursor = await db.execute('SELECT * from cve WHERE code=?', (code, ))
        a = await cursor.fetchone()
        if a is None:
            if file is None:
                file = 'null'
            else:
                file = file
            await db.execute('INSERT INTO cve VALUES (?,?,?,?,?,?,?,?,?,?);', (code, file, name, severity, score, description, summary, references, weaknesses, conclusion))
            await interaction.response.send_message(f"You've successfully created a CVE with the code of `{code}`!", ephemeral=True)
        else:
            await interaction.response.send_message(f"There is already a CVE created by the code of `{code}`!", ephemeral=True)
        await db.commit()
        await db.close()
        print(f'{bcolors.OKGREEN}{bcolors.BOLD}{bcolors.ENDC}✔{bcolors.OKCYAN} The Create command has finished running{bcolors.ENDC}')

class DeleteCVECog(commands.GroupCog, name="delete"):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        super().__init__() 

    @app_commands.command(name="cve", description="Delete a CVE!")
    @app_commands.guilds(discord.Object(id=guild_id))
    @app_commands.describe(code="What is the code of the CVE?")
    @owner_only()
    async def cve(self, interaction: discord.Interaction, code: str) -> None:
        print(f'{bcolors.OKGREEN}{bcolors.BOLD}✔{bcolors.ENDC}{bcolors.OKCYAN} The Delete command has started to run{bcolors.ENDC}')
        db = await aiosqlite.connect('database.db')
        cursor = await db.execute('SELECT * from cve WHERE code=?', (code, ))
        a = await cursor.fetchone()
        if a is None:
            await interaction.response.send_message(f"There is no CVE by the code of `{code}`!")
        else:
            cursor = await db.execute('DELETE FROM cve WHERE code=?', (code, ))
            await interaction.response.send_message(f"Successfully deleted the `{code}` CVE!", ephemeral=True)
        await db.commit()
        await db.close()
        print(f'{bcolors.OKGREEN}{bcolors.BOLD}{bcolors.ENDC}✔{bcolors.OKCYAN} The Delete command has finished running{bcolors.ENDC}')

class EditCVECog(commands.GroupCog, name="edit"):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        super().__init__() 

    @app_commands.command(name="cve", description="Edits a CVE!")
    @app_commands.guilds(discord.Object(id=guild_id))
    @app_commands.describe(code="What is the code of the CVE?")
    @owner_only()
    async def cve(self, interaction: discord.Interaction, code: str, file: str, name: Optional[str], severity: Optional[int], score: Optional[int], description: Optional[str], summary: Optional[str], references: Optional[str], weaknesses: Optional[str], conclusion: Optional[str]) -> None:
        print(f'{bcolors.OKGREEN}{bcolors.BOLD}✔{bcolors.ENDC}{bcolors.OKCYAN} The Edit command has started to run{bcolors.ENDC}')
        await interaction.response.defer(thinking=True, ephemeral=True)
        db = await aiosqlite.connect('database.db')
        cursor = await db.execute('SELECT * from cve WHERE code=?', (code, ))
        a = await cursor.fetchone()
        if a is None:
            await interaction.followup.send(f"There is no CVE by the code of `{code}`!")
        else:
            if file is None:
                file = a[1]
            else:
                file = file
            if name is None:
                name = a[2]
            else:
                name = name
            if severity is None:
                severity = a[3]
            else:
                severity = severity
            if score is None:
                score = a[4]
            else:
                score = score
            if description is None:
                description = a[5]
            else:
                description = description
            if summary is None:
                summary = a[6]
            else:
                summary = summary
            if references is None:
                references = a[7]
            else:
                references = references
            if weaknesses is None:
                weaknesses = a[8]
            else:
                weaknesses = weaknesses
            if conclusion is None:
                conclusion = a[9]
            else:
                conclusion = conclusion
            await db.execute('UPDATE cve SET file=? WHERE code=?', (file, code))
            await db.execute('UPDATE cve SET name=? WHERE code=?', (name, code))
            await db.execute('UPDATE cve SET severity=? WHERE code=?', (severity, code))
            await db.execute('UPDATE cve SET score=? WHERE code=?', (score, code))
            await db.execute('UPDATE cve SET description=? WHERE code=?', (description, code))
            await db.execute('UPDATE cve SET summary=? WHERE code=?', (summary, code))
            await db.execute('UPDATE cve SET reference=? WHERE code=?', (references, code))
            await db.execute('UPDATE cve SET weaknesses=? WHERE code=?', (weaknesses, code))
            await db.execute('UPDATE cve SET conclusion=? WHERE code=?', (conclusion, code))
            await interaction.followup.send(f"Successfully updated the `{code}` CVE!", ephemeral=True)
        await db.commit()
        await db.close()
        print(f'{bcolors.OKGREEN}{bcolors.BOLD}{bcolors.ENDC}✔{bcolors.OKCYAN} The Edit command has finished running{bcolors.ENDC}')

client.run(token)